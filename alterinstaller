#!/usr/bin/env bash

set -eu

msgdebug=false
nocolor=false
bash_debug=false
debug=false

install_config=()

archiso_bootmnt="/run/archiso/bootmnt"
installer_mountpoint="/var/alterinstall"


######################################################################################
# _msg_common [-n] <label color> <label> <str1> <str2> ...
_msg_common(){
    #[[ "${msgdebug}" = true  ]] && set -xv
    #[[ "${msgdebug}" = false ]] && set +xv
    local _msg_opts=("-e") _count _message
    ! [[ "${1}" = "while" ]] && _color="${1}" && shift 1
    [[ "${1}" = "-n" ]] && _msg_opts+=("-n") && shift 1
    _message="$(_colored_text -c "${_color}" "${@}")"
    for _count in $(seq "1" "$(echo -ne "${_message}\n" | wc -l)"); do
        echo "${_msg_opts[@]}" "   $(echo -e "${_message}" | head -n "${_count}" | tail -n 1 )"
    done
    #[[ "${bash_debug}" = true  ]] && set -xv
    #[[ "${bash_debug}" = false ]] && set +xv
    return 0
}

# Show an INFO message
# $1: message string
_msg_info() { _msg_common green "${@}"; }

# Show a Warning message
# $1: message string
_msg_warn() { _msg_common yellow "${@}"; }

# Show a debug message
# $1: message string
_msg_debug() { [[ "${debug}" = true ]] && _msg_common magenta "<Debug>" "${@}"; return 0;}

# Show an ERROR message then exit with status
# $1: message string
_msg_error() { _msg_common red "${@}"; }

# Show a message without label
_msg(){ _msg_common white "${@}"; }

# 使い方
# text [-b/-c color/-n/-f/-l/]
_colored_text() {
    local OPTIND OPTARG arg _textcolor _decotypes="" _notranslate=false
    while getopts "c:bnfl" arg; do
        case "${arg}" in
            c)
                case "${OPTARG}" in
                    "black"   ) _textcolor="30" ;;
                    "red"     ) _textcolor="31" ;;
                    "green"   ) _textcolor="32" ;;
                    "yellow"  ) _textcolor="33" ;;
                    "blue"    ) _textcolor="34" ;;
                    "magenta" ) _textcolor="35" ;;
                    "cyan"    ) _textcolor="36" ;;
                    "white"   ) _textcolor="37" ;;
                    *         ) return 1        ;;
                esac
                ;;
            b) _decotypes="${_decotypes};1" ;;
            f) _decotypes="${_decotypes};5" ;;
            l) _decotypes="${_decotypes};4" ;;
            n) _notranslate=true            ;;
            *) : ;;
        esac
    done
    shift "$((OPTIND - 1))"
    if [[ "${nocolor}" = true ]]; then
        echo -ne "${@}"
    else
        echo -ne "\e[$([[ -v _textcolor ]] && echo -n ";${_textcolor}"; [[ -v _decotypes ]] && echo -n "${_decotypes}")m${*}\e[m"
    fi
}

# 質問を行う関数
# Returns only the selected result to standard output
# ask_question -n -d <デフォルト値> -p <質問文> <選択肢1> <選択肢2> ...
# -n: Return with number
ask_question(){
    local arg OPTARG OPTIND _default="" _choice_list _count _choice _question _mark _number=false
    while getopts "ad:p:n" arg; do
        case "${arg}" in
            d) _default="${OPTARG}" ;;
            p) _question="${OPTARG}" ;;
            n) _number=true ;;
            *) exit 1 ;;
        esac
    done
    shift "$((OPTIND - 1))" ; _choice_list=("${@}") _digit="${##}"
    (( ${#_choice_list[@]} < 0 )) && echo "An exception error has occurred." >&2 && exit 1
    (( ${#_choice_list[@]} <= 1 )) && {
        [[ "${_number}" = true ]] && echo "1" || echo "${_choice_list[*]}" 
    } && return 0
    [[ -n "${_question-""}" ]] && echo "   ${_question}" >&2
    for (( _count=1; _count<=${#_choice_list[@]}; _count++)); do
        _choice="${_choice_list[$(( _count - 1 ))]}" _mark=" "
        { [[ ! "${_default}" = "" ]] && [[ "${_choice}" = "${_default}" ]]; } && _mark="*"
        printf " ${_mark} %${_digit}d: ${_choice}\n" "${_count}" >&2
    done
    echo -n "   (1 ~ ${#_choice_list[@]}) > " >&2 && read -r _input
    { [[ -z "${_input-""}" ]] && [[ -n "${_default-""}" ]]; } && {
        [[ "${_number}" = true ]] && echo 0 || echo "${_default}"
    } && return 0
    { printf "%s" "${_input}" | grep -qE "^[0-9]+$";} && { (( 1 <= _input)) && (( _input <= ${#_choice_list[@]} )); } && {
        [[ "${_number}" = true ]] && echo "$(( _input ))" || echo "${_choice_list[$(( _input - 1 ))]}" 
    } && return 0
    for (( i=0; i <= ${#_choice_list[@]} - 1 ;i++ )); do
        [[ "${_choice_list["${i}"],,}" = "${_input,,}" ]] && {
            [[ "${_number}" = true ]] && echo "$(( i + 1))" || echo "${_choice_list["${i}"]}" 
        } && return 0
    done
    return 1
}

_add_config(){
    _msg_debug "${1}=${2}"
    install_config+=("${1}=${2}")
}
_get_config(){ 
    printf "%s\n" "${install_config[@]}" | awk -F "=" "{if (\$1 == \"${1}\"){print \$2; exit}}"
}

######################################################################################

_run(){
    "${@}"
    echo
}

_check_environment(){
    # Check root
    (( UID == 0 )) || {
        _msg_error "Please run this installer as root"
        exit 1
    }

    # Create dir
    mkdir -p "${installer_mountpoint}"
}

_first_message(){
    _msg_warn "This installer is a simplified version."
    _msg_warn "Complex configurations such as dual boot are not supported."
    _msg_warn "Also, only EFI boot with Grub is supported. Legacy BIOS is not supported. "
}

_select_layout(){
    local _layout_list _selected="jp106" _answer _ask
    readarray -t _layout_list < <(localectl list-keymaps)

    _msg "== Configure keyboard map =="

    _ask(){
        _answer="$(ask_question -n -d "${_selected}" -p "Please select or enter layout from list" \
            "Continue with current layout(${_selected})" "Show keymap list" "Enter keymap")"
    
        case "${_answer}" in
            "1")
                return 0
                ;;
            "2")
                printf "%s\n" "${_layout_list[@]}" | less
                ;;
            "3")
                read -r -p "(Layout) > " _answer
                printf "%s\n" "${_layout_list[@]}" | grep -qx "${_answer}" && _selected="${_answer}" && {
                    _msg_info "echo ${_answer} is selected"
                }
                ;;
        esac
        echo
        _ask
        return 0
    }

    _ask
    _add_config "keyboard" "${_selected}"
}

_select_locale(){
    local _locale_list _selected="ja_JP" _answer _ask
    readarray -t _locale_list < <(find /usr/share/i18n/locales -printf "%f\n")

    _msg "== Configure locale =="

    _ask(){
        _answer="$(ask_question -n -d "${_selected}" -p "Please select or enter locale from list" \
            "Continue with current locale(${_selected})" "Show locale list" "Enter locale")"
    
        case "${_answer}" in
            "1")
                return 0
                ;;
            "2")
                printf "%s\n" "${_locale_list[@]}" | less
                ;;
            "3")
                read -r -p "(Layout) > " _answer
                printf "%s\n" "${_locale_list[@]}" | grep -qx "${_answer}" && _selected="${_answer}" && {
                    _msg_info "${_answer} is selected"
                }
                ;;
        esac
        echo
        _ask
        return 0
    }

    _ask
    _add_config "locale" "${_selected}"
}

_select_disk(){
    _msg "== Configure disk to install =="

    local _disk_list _choices _disk _answer _selected
    readarray -t _disk_list < <(lsblk -l -n -o TYPE,NAME | awk '{if ($1=="disk"){print "/dev/"$2}}')
    for _disk in "${_disk_list[@]}"; do
        _choices+=("${_disk} : $(lsblk "${_disk}" -l -n -o MODEL | grep -Evx "^$") $(lsblk "${_disk}" -l -n -o TYPE,NAME | awk '{if ($1=="part"){print "/dev/"$2}}' | wc -l) Partition")
    done

    _answer="$(ask_question -n -p "Please select the disk to install\nThe selected disc will be fully initialized" "${_choices[@]}")"
    _selected="${_disk_list[$(( _answer - 1 ))]}"
    _add_config "disk" "${_selected}"
}

_edit_disk(){
    _msg_warn "This installer does not edit the partition now"
    _msg_warn "Manually select the partition after editing the partition."

    case "$(ask_question -n -p "Do you want to edit partition?" "Yes" "No")" in
        "1")
            cfdisk "$(_get_config disk)"
            ;;
        "2")
            echo
            _msg "Make sure the partition is already configured for the new system"
            case "$(ask_question -n "Yes" "No")" in
                "1")
                    return 0
                    ;;
                *) 
                    echo
                    _run _select_disk
                    ;;
            esac
            ;;
    esac
}

_select_part(){
    local _part_list=() _choices=()
    _msg "== Configure partition to install =="

    # Get partition list
    readarray -t _part_list < <(
        lsblk "$(_get_config disk)" -l -n -o TYPE,NAME | awk '{if ($1=="part"){print "/dev/"$2}}'
    )

    # Check partition 
    (( ${#_part_list[@]} < 2)) && {
        _msg_error "The selected disk has less than two partitions."
        _msg_error "Requires two partitions, main and EFI"
        exit 1
    } || (( ${#_part_list[@]} == 2 )) && {
        _msg_info "Two partitions were found on the selected disk."
        _msg_info "Since the purpose of one partition has already been decided, initialize the other partition for EFI."
    }

    # Create choices for ask_question
    for _part in "${_part_list[@]}"; do
        _choices+=("${_part} : $(lsblk -l -n -o SIZE "${_part}" | sed "s/ *//g")")
    done
    _choices+=("Edit disk partition")

    # Ask
    _answer="$(ask_question -n -p "Please select the partition to install" "${_choices[@]}")"

    # Parse input
    if (( "${_answer}" == "${#_choices[@]}" )); then
        _run _edit_disk
        return 0
    fi

    _selected="${_part_list[$(( _answer - 1 ))]}"
    _add_config "part_main" "${_selected}"
}

_select_efi_part(){
    local _part_list=() _choices=()
    _msg "== Configure EFI partition to install =="

    # Get partition list
    readarray -t _part_list < <(
        lsblk "$(_get_config disk)" -l -n -o TYPE,NAME | \
        awk '{if ($1=="part"){print "/dev/"$2}}' | \
        grep -vx "$(_get_config "part_main")"
    )



    # Create choices for ask_question
    for _part in "${_part_list[@]}"; do
        _choices+=("${_part} : $(lsblk -l -n -o SIZE "${_part}" | sed "s/ *//g")")
    done

    # Ask
    _answer="$(ask_question -n -p "Please select the partition to use as EFI partition" "${_choices[@]}")"
    _selected="${_part_list[$(( _answer - 1 ))]}"
    _add_config "part_efi" "${_selected}"
}

_ask_username(){
    local _answer _ask
    _msg "== Configure user name =="

    _ask(){
        _msg "Please enter user name"
        read -r -p "   > " _answer
        [[ ! "${_answer=""}" = "" ]] || {
            _msg_error "Please enter user name"
            _ask
            return 0
        }
    }
    _ask
    
    _answer="$(echo -n "${_answer}" | sed 's/ //g' | tr '[:upper:]' '[:lower:]')"
    _add_config "username" "${_answer}"
}


_ask_hostname(){
    local _answer _ask
    _msg "== Configure host name =="

    _ask(){
        _msg "Please enter host name"
        read -r -p "   > " _answer
        [[ ! "${_answer=""}" = "" ]] || {
            _msg_error "Please enter user name"
            _ask
            return 0
        }
        (( "${#_answer}" > 63 )) && {
            _msg_error "The number of characters must be 63 characters or less."
            _ask
            return 0
        }

        # shellcheck disable=SC2001
        [[ -n "$(sed -e "s/[0-9a-zA-Z-]*//g" <<< "${_answer}")" ]] && {
            _msg_error "Only numbers, alphabets and hyphens can be used."
            _ask
            return 0
        }

        { grep -qE "^-" <<< "${_answer}" || grep -qE -- "-$" <<< "${_answer}"; } && {
            _msg_error "You cannot use hyphens at the beginning or end."
            _ask
            return 0
        }
        return 0
    }

    _ask
    _add_config "hostname" "${_answer}"


}

_ask_user_password(){
    local _ask _answer
    _msg "== Configure password =="

    _ask(){
        local _answer1 _answer2
        _msg "Please enter user password"
        read -r -s -p "   > " _answer1

        _msg "\nPlease enter again"
        read -r -s -p "   > " _answer2

        { [[ ! "${_answer1}" = "${_answer2}" ]] || [[ -n "${_answer1-""}${_answer2-""}" ]]; } || {
            _msg_error "The passwords do not match."
            _ask
            return 0
        }

        _answer="${_answer1}"
        return 0
    }
    _ask
    _msg_info "\nThe same password will be set as root one"
    _add_config "user_password" "${_answer}"
}

# _install_create_partition_auto(){
#     _msg_info "Configure partition ..."

#     parted --script "$(_get_config "disk")" \
#         mklabel gpt \
#         mkpart EFI fat32 START 256MB \
#         mkpart Linux ext4 256MB -4GB \
#         mkpart Swap linux-swap -4GB END
# }

_install_format(){
    local _efi _root

    _efi="$(_get_config "part_efi")"
    _root="$(_get_config "part_main")"

    _msg_info "Create Ext4 filesystem on ${_root}"
    mkfs.ext4 "${_root}"

    _msg_info "Create EFI filesystem on ${_efi}"
    mkfs.vfat -F32 "${_efi}"
}

_install_mount(){
    _efi="$(_get_config "part_efi")"
    _root "$(_get_config "part_main")"

    _msg_info "Mount ${_root} at ${installer_mountpoint}/main"
    mount "${_root}" "${installer_mountpoint}/main"
    
    _msg_info "Mount ${_efi} at ${installer_mountpoint}/main/boot"
    mkdir -p "${installer_mountpoint}/main/boot"
    mount "${_efi}" "${installer_mountpoint}/main/boot"
}

_install_unpack(){
    local _sfs

    while read -r _sfs; do
        unsquashfs -force -dest "${installer_mountpoint}/main" "${_sfs}"
    done < <(find "${archiso_bootmnt}" -name '*.sfs')
}


_configure_disk(){
    _run _select_disk
    _run _edit_disk
    _run _select_part
    _run _select_efi_part
}

_configure_locale(){
    _run _select_layout
    _run _select_locale
}

_configure_profile(){
    #_run _ask_fullname
    _run _ask_hostname
    _run _ask_username
    _run _ask_user_password
    #_run _ask_root_password
}

_run_install(){
    _run _install_format
    _run _install_mount
    _run _install_unpack
}

_check_environment
_run _first_message

_configure_locale
_configure_disk
_configure_profile

_run_install


